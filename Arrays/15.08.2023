1. //Move all zeroes to the start of an array.

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 0, 4, 3, 0, 5, 0};
       int j = 0;
       for(int i = 0; i < arr.length; i++){
           if(arr[i] == 0){
               int temp = arr[j];
               arr[j] = arr[i];
               arr[i] = temp;
               j++;
           }
       }
        System.out.println(Arrays.toString(arr));

2.//Move all zeroes to the end of an array.

        int count = 0;
        for(int i = 0; i < arr.length; i++){
            if(arr[i] != 0){
                arr[count] = arr[i];
                count++;
            }
        }
        while (count < arr.length){
            arr[count] = 0;
            count++;
        }
        System.out.println(Arrays.toString(arr));

    }
}

3. //Rearrange the array such that even positioned are greater than odd

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2, 5};
        rearrange(arr);
        System.out.println(Arrays.toString(arr));

    }
    public static void rearrange(int[] arr){
        for(int i = 1; i < arr.length; i++){
            if(i % 2 == 0){
                if(arr[i] < arr[i - 1]){
                    int temp = arr[i];
                    arr[i] = arr[i - 1];
                    arr[i - 1] = temp;
                }
            }else{
                if(arr[i] > arr[i - 1]){
                    int temp = arr[i];
                    arr[i] = arr[i - 1];
                    arr[i - 1] = temp;
                }
            }
        }
    }
}

4.//Rearrange array such that odd positioned are greater than even

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2, 5};
        rearrange(arr);
        System.out.println(Arrays.toString(arr));

    }
    public static void rearrange(int[] arr){
        for(int i = 1; i < arr.length; i++){
            if(i % 2 == 0){
               if(arr[i] > arr[i - 1]){
                   int temp = arr[i];
                   arr[i] = arr[i - 1];
                   arr[i - 1] = temp;
               }
            }else{
                if(arr[i - 1] > arr[i]){
                    int temp = arr[i - 1];
                    arr[i - 1] = arr[i];
                    arr[i] = temp;
                }
            }
        }
    }
}


5.// Two Pointers Technique

import java.util.Arrays;

class Test{
    public static void main(String[] args) {
        int[] arr = {2,5,6,4,7,8,8};

        System.out.println(Arrays.toString(isSum(arr,11)));
    }
    public static int[]  isSum(int[] arr, int sum){
        // Works on Sorted Array.
        Arrays.sort(arr);
        System.out.println("New Sorted Array " + Arrays.toString(arr));
        int i = 0;
        int j = arr.length - 1;
        int[] arr2 = {-1,-1};

        while(i < j){
            if((arr[i] + arr[j]) == sum){
                arr2[0] = i;
                arr2[1] = j;
                return arr2;
            }else if(arr[i] + arr[j] < sum){
                i++;
            }else{
                j--;
            }
        }
        return arr2;
    }
}



6.// Rearrange an array in maximum minimum form using Two Pointer Technique

import java.util.Arrays;

class Test {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7};
        rearrange(arr);
        System.out.println(Arrays.toString(arr));
    }
    public static void rearrange(int[] arr){
        int[] temp = arr.clone();
        int small = 0;
        int large = temp.length - 1;

        boolean flag = true;

        for(int i = 0; i < arr.length; i++){
            if(flag){
                arr[i] = temp[large];
                large--;

            }else {
                arr[i] = temp[small];
                small++;

            }
            flag = !flag;
        }
    }
}
