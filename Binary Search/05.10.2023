1.//Search insert position of K in a sorted array.
class Practice{
    public static void main(String[] args) {
        int[] arr = {1,3,5,6};
        int K = 2;
        System.out.println(insertPosition(arr,K));
    }

    static int insertPosition(int[] arr, int K){
        int left = 0;
        int right = arr.length - 1;
        while (left <= right){
            int mid = left + (right - left)/2;
            if(arr[mid] == K){
                return mid;
            } else if (arr[mid] > K) {
                right = mid - 1;
            }else {
                left = mid + 1;
            }
        }
        return right + 1;

    }
}


2.//Sqrt(x)
class Practice{
    public static void main(String[] args) {
        int K = 4;
        System.out.println(sqrt(K));

    }

    static int sqrt(int K){
        long start = 0;
        long end = K;
        while (start + 1 < end){
            long mid = start + (end - start)/2;
            if(mid * mid == K){
                return (int)mid;
            } else if (mid * mid > K) {
                end = mid;
            }else{
                start = mid;
            }
        }
        if(end * end == K)
            return (int) end;
        return (int)start;
    }
}


3.//First Bad Version.
class Practice{
    public static void main(String[] args) {
        int K = 4;
        System.out.println(firstBadVersion(K));

    }

    public static int firstBadVersion(int n){
        int start = 1;
        int end = n;
        int result = 0;
        
        while (start <= end){
            int mid = start + (end - start)/2;
            if(isBadVersion(mid)){
                result = mid;
                end = mid - 1;
            }else {
                start = mid + 1;
            }
        }
        return result;
    }
}


4.//Intersection of two arrays.
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Practice{
    public static void main(String[] args) {
        int[] arr1 = {2,3,5,6};
        int[] arr2 = {3,5,7,1};
        System.out.println(insertion(arr1,arr2));

    }

    public static boolean present(int[] arr1, int K){
      int start = 0;
      int end = arr1.length - 1;
      while (start <= end){
          int mid = start + (end - start)/2;
          if(arr1[mid] == K){
              return true;
          } else if (arr1[mid] > K) {
              end = mid - 1;
          }else {
              start = mid + 1;

          }
      }
      return false;
    }

    static List insertion(int[] arr1, int[] arr2){
        ArrayList<Integer> list = new ArrayList<>();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        for(int i = 0; i < arr2.length; i++){
            if(search(arr1,arr2[i]))
                list.add(arr1[i]);
        }
        return list;
    }

}


5.//Valid Perfect Square.
class Practice{
    public static void main(String[] args) {
        int K = 36;
        System.out.println(validSquare(K));
    }

    public static boolean validSquare(int K){
        int start = 1;
        int end = K;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(mid * mid == K || end * end == K || start * start == K){
                return true;
            } else if (mid * mid > K) {
                end = mid - 1;
            }else {
                start = mid + 1;
            }
        }
        return false;

    }
}
