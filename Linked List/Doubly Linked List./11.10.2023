class Node{
    int value;
    Node next;
    Node previous;

    public Node(int value){
        this.value = value;
    }
    public Node(int value,Node next,Node previous){
        this.value = value;
        this.next = next;
        this.previous = previous;
    }
}
public class DoublyLinkedList{
    private Node head;
    private Node tail;
    private int size;

    public void insertFirst(int value){
        Node node = new Node(value);
        node.next = head;
        node.previous = null;
        if(head != null) {
            head.previous = node;
        }
        head = node;
        size++;
    }

    public void insertLast(int value) {
        Node node = new Node(value);
        Node last = head;
        node.next = null;
        if (head == null) {
            node.previous = null;
            head = node;
            size++;
            return;
        }
        while (last.next != null){
            last = last.next;
        }
        last.next = node;
        node.previous = last;
        size++;
    }
    public Node find(int value) {
        Node node = head;
        while (node != null) {
            if (node.value == value) {
                return node;
            }
            node = node.next;
        }
        return null;
    }
    public void insertAfter(int after, int val) {
        Node p = find(after);

        if (p == null) {
            System.out.println("does not exist");
            return;
        }

        Node node = new Node(val);
        node.next = p.next;
        p.next = node;
        node.previous = p;
        if (node.next != null) {
            node.next.previous = node;
        }
        size++;
    }
    public int deleteFirst(){
        int value = head.value;
        head = head.next;
        if(head == null){
            tail = null;
        }
        size--;
        return value;
    }
    public int deleteLast(){
        if(size <= 1){
            return deleteFirst();
        }
        Node secondLast = get(size - 2);
        int value = tail.value;
        tail = secondLast;
        tail.next = null;
        size--;
        return value;
    }
    public Node get(int index){
        Node node = head;
        for(int i = 0; i < index; i++){
            node = node.next;
        }
        return node;
    }
    public boolean search(int target){
        Node temp = head;
        while (temp != null){
            if(temp.value == target){
                return true;
            }
            temp = temp.next;
        }
        return false;
    }
    public void display(){
        Node node = head;
        while (node != null){
            System.out.print(node.value + " -->");
            node = node.next;
        }


   }
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        list.insertFirst(3);
        list.insertFirst(4);
        list.insertFirst(5);
        list.insertFirst(6);
        list.insertLast(9);
        list.insertAfter(3,77);
        System.out.println(list.size);
        list.display();
        
    }

}
