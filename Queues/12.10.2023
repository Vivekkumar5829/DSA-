class Queue{
    int front;
    int rear;
    int size;
    int capacity;
    int array[];

    public Queue(int capacity){
        this.capacity = capacity;
        front = this.size = 0;
        rear = this.capacity - 1;
        array = new int[this.capacity];
    }

    boolean isFull(Queue queue){
        return (queue.size == queue.capacity);
    }
    boolean isEmpty(Queue queue){
        return(queue.size == 0);
    }

    void enqueue(int item){
        if(isFull(this)){
            System.out.println("Queue is full");
            return;
        }else {
            this.rear = (this.rear + 1) % this.capacity;
            this.array[this.rear] = item;
            this.size = this.size + 1;
//            System.out.println(item + " Enqueued to queue");
        }

    }
    int deQueue(){
        if(isEmpty(this)){
            return Integer.MAX_VALUE;
        }else{
            int item = this.array[front];
            front = (this.front + 1) % this.capacity;
            this.size = this.size - 1;
            return item;
        }
    }
    int front(){
        if(isEmpty(this)){
            return Integer.MIN_VALUE;
        }else{
            return this.array[this.front];
        }
    }
    int rear(){
        if(isEmpty(this)){
            return Integer.MIN_VALUE;
        }else{
            return this.array[this.rear];
        }
    }

    void display(){
        int temp = this.front;
        while (temp <= rear){
            System.out.print(this.array[temp] + "-->");
            temp = temp + 1;
        }
    }
    public static void main(String[] args) {
        Queue queue = new Queue(6);
        queue.enqueue(3);
        queue.enqueue(4);
        queue.enqueue(5);
        queue.enqueue(6);
        queue.enqueue(7);
        queue.enqueue(8);
        queue.deQueue();
        queue.display();
        System.out.println();
        System.out.println(queue.front());
        System.out.println(queue.rear());

    }
}
