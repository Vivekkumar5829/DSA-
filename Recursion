1.//Sum triangle from array.
Input : A = {1, 2, 3, 4, 5}
Output : [48]
         [20, 28] 
         [8, 12, 16] 
         [3, 5, 7, 9] 
         [1, 2, 3, 4, 5] 

Explanation :
Here,   [48]
        [20, 28] -->(20 + 28 = 48)
        [8, 12, 16] -->(8 + 12 = 20, 12 + 16 = 28)
        [3, 5, 7, 9] -->(3 + 5 = 8, 5 + 7 = 12, 7 + 9 = 16)
        [1, 2, 3, 4, 5] -->(1 + 2 = 3, 2 + 3 = 5, 3 + 4 = 7, 4 + 5 = 9)

 
import java.util.Arrays;
class SumOfTriangle{
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        sumTriangle(arr);

    }
    public static void sumTriangle(int[] arr){
        if(arr.length < 1)
            return;
        int[] arr2 = new int[arr.length - 1];
        for(int i = 0; i < arr.length - 1; i++){
            int x = arr[i] + arr[i + 1];
            arr2[i] = x;
        }
        sumTriangle(arr2);
        System.out.println(Arrays.toString(arr));
    }
}


2.//Recursive Programs to find Minimum and Maximum elements of array.
Input: arr = {1, 4, 3, -5, -4, 8, 6};
Output: min = -5, max = 8

Input: arr = {1, 4, 45, 6, 10, -8};
Output: min = -8, max = 45

class Practice {
    public static void main(String[] args) {
        int[] arr = {1, 4, 3, -5, -4, 8, 6};
        System.out.println("Min = " + min_Element(arr, arr.length));
        System.out.println("Max = " +maxElement(arr,arr.length));
    }
    public static int min_Element(int[] arr, int n){
        if(n == 1)
            return arr[0];

        int min = min_Element(arr,n-1);
        if(arr[n - 1] > min){
            return min;
        }else{
            return arr[n - 1];
        }
    }

    public static int maxElement(int[] arr, int n){
        if(n == 1)
            return arr[0];
        return Math.max(arr[n - 1] , maxElement(arr, n-1));
    }
}

3. // Write a program to print from a given number N to 1.
Input: N = 6;
Output: 6,5,4,3,2,1
class Practice{
    public static void main(String[] args) {
        int n = 6;
        printNtoOne(n);
    }
    public static void printNtoOne(int n){
        System.out.println(n);
        if(n == 1){
            System.out.println(n);
            return;
        }
        printNtoOne(n-1);
    }
}

4. //Write a program to print from a given number 1 to N.

 public static void printOnetoN(int n){

        if(n == 1){
            System.out.println(n);
            return;
        }
        printOnetoN(n-1);
        System.out.println(n);
    }

5. //Write a program to find the factorial of given number.

 public static int factorial(int n){
        if(n <= 1)
            return 1 ;

        return n *  factorial(n-1);
    }

6. // Write a program to find the sum of N number.

  public static int sum(int n){
        if(n == 1){
            return 1;
        }
        return n + sum(n - 1);
    }

7. // Write a program to find the sum of the digits in a given number.

  public static int sumOfDigits(int n){
        if(n == 0){
            return 0;
        }
        return (n % 10) + sumOfDigits(n / 10);
    }

8. // Write a program to find the product of the digits in a given number.

  public static int productOfDigits(int n){
        if(n % 10 == n){
            return n;
        }
        return (n % 10) * productOfDigits(n /10);
    }

9. // Write a program to reverse the given number.
  public static int reverse(int n){
        int sum = 0;
        while (n > 0) {
            int remainder = n % 10;
            n = n / 10;
            sum = sum * 10 + remainder;
        }
        return sum;
    }

10. // Write a program to check for the palindrome.

 public static boolean palindrome(int n){
        return reverse(n) == n;
    }

11. Write a program to count hte number of 0 in a given number.

public static int countZero(int n){
        return helper(n,0);
    }

    public static int helper(int n, int count){
       if(n == 0){
           return count;
       }
       int remainder = n % 10;
       if(remainder == 0){
         return helper(n / 10, count+ 1);
       }
       return helper(n / 10, count);
    }

12. //Leetcode(1342) Number of Steps to Reduce a Number to Zero.

   public static int numberOfSteps(int n){
        return helper1(n, 0);
    }
    public static int helper1(int n, int steps){
        if(n == 0){
            return steps;
        }
        if(n % 2 == 0){
            return helper1(n / 2, steps + 1);
        }
        return helper1(n - 1, steps + 1);
    }

(Brute Force way):--
    public static int numOfSteps(int n){
        int steps = 0;
        while (n > 0){
            if(n % 2 == 0){
                n = n / 2;
            }else{
                n = n - 1;
            }
            steps++;

        }
        return steps;
    }
}

13.// (leetcode)704 Binary Search

 public static int search(int[] nums, int target) {
        return  binarySearch(nums, target, 0, nums.length - 1);
    }

    public static int binarySearch(int[] nums, int target, int start, int end) {
        if(start > end){
            return -1;
        }
        int mid = start + (end - start)/2;
        if(nums[mid] == target){
            return mid;
        }else if(nums[mid] > target){
            return binarySearch(nums,target,start,mid-1);
        }else{
            return binarySearch(nums,target,mid+1, end);
        }

    }

14. //First uppercase letter in a string (Iterative and Recursive).

 public static char capital(String str){
        for(int i = 0; i < str.length(); i++){
            if(Character.isUpperCase(str.charAt(i))){
                return str.charAt(i);
            }
        }
        return 0;
    } 
  			OR
    public static char capital1(String str1, int i){
        if(str1.charAt(i) == '\0'){
            return 0;
        }
        if(Character.isUpperCase(str1.charAt(i))){
            return str1.charAt(i);
        }
        return capital1(str1,i - 1);
    }

15. // Print all the occurrences of the target in the given array.
class Practice{
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5,8,9,10,18,19,19,19,22};
        System.out.println(allOccurrences(arr,19,0,new ArrayList<>()));
    }

   public static ArrayList<Integer> allOccurrences(int[] arr,int target, int i, ArrayList<Integer> list){
        if(i == arr.length - 1){
            return list;
        }
        if(arr[i] == target){
            list.add(i);
        }
       return allOccurrences(arr,target, i+ 1, list);
    }
}

                           OR
class Practice{
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5,8,9,10,18,19,19,19,22};

        allOccurrences(arr,19,0);
        System.out.println(list);
}
static ArrayList<Integer> list = new ArrayList<>();
    public static void allOccurrences(int[] arr,int target, int i){
        if(i == arr.length - 1){
            return;
        }
        if(arr[i] == target){
            list.add(i);
        }
       allOccurrences(arr,target, i+ 1);
    }
}

16. // Print all the occurrences of the target in the given array one condition you have to take ArrayList inside the function.

 public static ArrayList<Integer> allOccurrences2(int[] arr, int target, int i){
        ArrayList<Integer> list = new ArrayList<>();
        if(i == arr.length - 1){
            return list;
        }
        if(arr[i] == target){
            list.add(i);
        }
        ArrayList<Integer> ansCombined = allOccurrences2(arr,target,i + 1);
        list.addAll(ansCombined);
        return list;

    }

17. //Linear Search using recursion.

    public static int linearSearch(int[] arr, int target, int i){
      if(i == arr.length){
          return -1;
      }
      if(arr[i] == target){
          return i;
      }
      return linearSearch(arr,target, i + 1);
    } 
                               OR

    public static int linearSearchlast(int[] arr, int target, int i){
        if(i == -1){
            return -1;
        }
        if(arr[i] == target){
            return i;
        }else {
            return linearSearchlast(arr,target,i - 1);
        }

//        return arr[i] == target || linearSearchlast(arr,target,i-1);   it will return boolean value.
    }

18. // Check if the given array is sorted or not.

    public static boolean sorted(int[] arr, int i){
       if(i == arr.length - 1){
           return true;
       }
       return arr[i] < arr[i + 1] && sorted(arr, i + 1);
//       if(arr[i] > arr[i + 1]){
//           return false;
//       }
//       return sorted(arr,i+1);
    }










