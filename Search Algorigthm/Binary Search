Binary Search:--

-This type of searching algorithm is used to find the position of a specific value contained in a sorted array.
-The binary search algorithm works on the principle of divide and conquer and it is considered the best searching algorithm because it's faster to run.

Algorithm:--

       -Compare the target element with the middle element of the array.
       -If the target element is greater than the middle element, then the search continues in the right half.
	-Else if the target element is less than the middle value, the search continues in the left half.
	-This process is repeated until the middle element is equal to the target element, or the target element is not in the array
	-If the target element is found, its index is returned, else -1 is returned.

Code Implementation:--
-There are 2 ways to implement Binary Search Algorithm.
             
(1).Iterative  Binary Search Algorithm:
public class BinarySearch {
    public static void main(String[] args) {
        int[] nums = {2, 12, 15, 17, 27, 29, 45};
        int target = 17;
        System.out.println(search(nums, target));
    }

    static int binary_Search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] > target)
                end = mid - 1;
            else if (nums[mid] < target)
                start = mid + 1;
            else
                return mid;
        }
        return -1;
    }
}

(2). Recursive Binary Search Algorithm.
class BinarySearch {
	public static void main(String[] args) {
        int[] arr = {2, 12, 15, 17, 27, 29, 45};
        int target = 17;
        System.out.println(binary_search(arr, 0, arr.length - 1, target));
    }

    int binary_Search(int arr[], int start, int end, int target)
    {
        while (r >= l) {
            int mid = l + (r - l) / 2;
            if (arr[mid] == x){
                return mid;
 	       }
            else if (arr[mid] > x){
                return binarySearch(arr, start, mid - 1, target);
            }else{
		return binarySearch(arr, mid + 1, r, x);
		}		
        }
        return -1;
    
    }
}

Time Complexity:
 	Best Case: O(1)
	Average Case: O(log N)
	Worst Case: O(log N)
Auxiliary Space: O(1), If the recursive call stack is considered then the auxiliary space will be O(logN).


Order-agnostic Binary Search:--

-we have to find a target element in a sorted array. We know that the array is sorted, but we don’t know if it’s sorted in ascending or descending order.

public class OrderAgnosticBinarySearch {
    public static void main(String[] args) {
        int[] nums1 = {-1, 2, 4, 6, 7, 8, 12, 15, 19, 32, 45, 67, 99};
        int[] nums2 = {99, 67, 45, 32, 19, 15, 12, 8, 7, 6, 4, 2, -1};
        int target = -1;
        System.out.println(search(nums1, target));
        System.out.println(search(nums2, target));
    }

    static int search(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;

        boolean isAscending = arr[start] < arr[end];

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (target == arr[mid])
                return mid;

            if (isAscending) {
                if (target < arr[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (target < arr[mid]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        return -1;
    }

}    Time Comlexity remain the same.


Advantages of Binary Search:--

	-Binary search is faster than linear search, especially for large arrays.
	-More efficient than other searching algorithms with a similar time complexity, such as interpolation search or exponential search.
	-Binary search is well-suited for searching large datasets that are stored in external memory, such as on a hard drive or in the cloud.


Disadvantages of Binary Search:--

	-The array should be sorted.
	-Binary search requires that the data structure being searched be stored in contiguous memory locations. 
	-Binary search requires that the elements of the array be comparable, meaning that they must be able to be ordered.

Applications of Binary Search:--

	-Binary search can be used as a building block for more complex algorithms used in machine learning, such as algorithms for training neural networks or finding the optimal hyperparameters for a model.
	-It can be used for searching in computer graphics such as algorithms for ray tracing or texture mapping.
	-It can be used for searching a database.
