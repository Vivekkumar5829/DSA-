Counting Sort:--

-The counting sort algorithm works by first creating a list of the counts or occurrences of each unique value in the list. It then creates a final sorted list based on the list of counts.
-One important thing to remember is that counting sort can only be used when you know the range of possible values in the input beforehand.


Code:--

import java.util.Arrays;

class Counting_Sort{
    public static void main(String[] args) {
        int[] arr = {5,2,5,5,3,1,2,5,1,5,0,5,3,1,5,2,2,2};
        counting_sort(arr);
        System.out.println(Arrays.toString(arr));
    }
    static void counting_sort(int[] arr){
        int max = Arrays.stream(arr).max().getAsInt();
        int min = Arrays.stream(arr).min().getAsInt();

        int range = max - min + 1;
        int[] count = new int[range];
        for(int j : arr){
            count[j - min]++;
        }

        for(int i = 1; i < count.length; i++){
            count[i] += count[i - 1];
        }

        int[] output = new int[arr.length];
        for(int i = arr.length - 1; i >= 0; i--){
            output[count[arr[i] - min] - 1] = arr[i];
            count[arr[i] - min]--;
        }


    System.arraycopy(output, 0, arr, 0, arr.length);
}
}



// More Clear  and easy understable 
 public  static int[] countSort(int[] nums){
        int max = nums[0];
        for (int i : nums){
            if(i > max){
                max = i;
            }
        }
        int[] frenquency = new int[max + 1];
        for(int j : nums){
            frenquency[j]++;
        }

        int index = 0;
        for(int i = 0; i < frenquency.length; i++){
            while (frenquency[i] > 0){
                nums[index] = i;
                index++;
                frenquency[i]--;
            }
        }
        return nums;
    }


// Using HashMap
    public static int[] countSort1(int[] nums){
        if (nums == null || nums.length <= 1) {
            return nums;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums){
            map.put(num,map.getOrDefault(num,0) + 1);
        }

        int index = 0;
        int min = Arrays.stream(nums).min().getAsInt();
        int max = Arrays.stream(nums).max().getAsInt();

        for (int i = min; i <= max; i++){
            int count = map.getOrDefault(i,0);
             for (int j = 0; j < count; j++){
                 nums[index] = i;
                 index++;
             }
        }
        return nums;
    }

Properties:--
      -Space complexity: O(k)
      -Best case performance: O(n+k)
      -Average case performance: O(n+k)
      -Worst case performance: O(n+k)
      -Stable: Yes (k is the range of the elements in the array)
