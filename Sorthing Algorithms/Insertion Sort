Insertion Sort:--

-It is like we are sorting the array partially.
-Sort the array in parts.
-For every index "Put that index element at the correct index on left hand side.

example:-- 

		int[] arr = {5,3,4,1,2}

-Here at first pass, compare the first and second elements and arrange them accordingly,
-At the second pass, compare the first, second, and third and arrange them accordingly.
and at each pass, we increase the number of elements that will be compared and arrange them accordingly until sorted.

After 1st pass i = 0
(3 < 5) 
			arr = {3,5,4,1,2}

After 2nd pass i = 1
(5 > 4) swap
(3 > 4)
			arr = {3,4,5,1,2}


After 3rd pass i = 2
(5 > 1) swap
(4 > 1) swap
(3 > 1) swap

			arr = {1,3,4,5,2}


After 4th pass i = 3
(5 < 2) swap
(4 < 2) swap
(3 < 2) swap
(1 < 2) 
			arr = {1,2,3,4,5}   Array is sorted.

			

Code:-- 

class InsertionSort{
    public static void main(String[] args) {
        int[] arr = {5,3,4,1,2};
        insertionSort(arr);
        System.out.println(Arrays.toString(arr));
    }
    public static void insertionSort(int[] arr){
        for(int i = 0; i < arr.length - 1; i++){
            for(int j = i + 1; j > 0; j--){
                if(arr[j - 1] > arr[j]){
                    int temp = arr[j - 1];
                    arr[j - 1] = arr[j];
                    arr[j] = temp;
                }else{
		                	break;
		          }
            }
        }
    }
}



Properties:
		-Space Complexity: O(1)
		-Time Complexity: O(n), O(n* n), O(n* n) for Best, Average, Worst cases respectively.
		-Best Case: array is already sorted
		-Average Case: array is randomly sorted
		-Worst Case: array is reversely sorted.
		-Sorting In Place: Yes
		-Stable: Yes

-Why use it?
Ans:--		-Adaptive: 
		      -Steps get reduced if the array is sorted.
		      -Number of swaps reduced as compared to bubble sort.
		      -Used for smaller values of N ==> works good when array is partially sorted.
		      -It takes part in hybrid sorting algorithm.
