Quick Sort:--

-Quick sort is an efficient divide and conquer sorting algorithm.
-Average case time complexity of Quick Sort is O(nlog(n)) with worst case time complexity being O(n^2) depending on the selection of the pivot element, which divides the current array into two sub arrays.

The steps involved in Quick Sort are:--
                                      (1) Choose an element to serve as a pivot, in this case, the last element of the array is the pivot.
                                      (2) Partitioning: Sort the array in such a manner that all elements less than the pivot are to the left, and all elements greater than the pivot are to the right.
                                      (3) Call Quicksort recursively, taking into account the previous pivot to properly subdivide the left and right arrays. (A more detailed explanation can be found in the comments below)


Time Complexity:-- O(nlogn)

Code:--

import java.util.Arrays;

public class QuickSort{
        public static void quickSort(int[] arr, int start, int end){
            if(start < end){
                int partition = findPartition(arr, start, end);
                quickSort(arr,start, partition - 1);
                quickSort(arr, partition + 1, end);
            }
        }
        public static int findPartition(int[] arr, int start, int end){
            int pivot = arr[end];
            int i = (start - 1);
            for(int j = start; j < end; j++){
                if(arr[j] < pivot ){
                    i++;
                    swap(arr,i,j);
                }
            }
            swap(arr,i + 1, end);
            return i + 1;
        }
        public static void swap(int[] arr, int first, int second){
            int temp = arr[first];
            arr[first] = arr[second];
            arr[second] = temp;
        }

    public static void main(String[] args) {
        int[] arr = {4,9,2,5,7,1,6,8,3};
        quickSort(arr,0,arr.length - 1);
        System.out.println(Arrays.toString(arr));
    }
}
