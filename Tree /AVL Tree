    public class AVL {
        public class Node{
            private int value;
            private Node left;
            private Node right;
            private int height;

            public Node(int value){
                this.value = value;
            }

            public int getValue(){
                return value;
            }
        }

        private Node root;

        public AVL(){

        }

        public int height(Node node){
            if(node == null){
                return -1;
            }
            return node.height;
        }

        public boolean isEmpty(){
            return root == null;
        }

        public void insert(int value){
            root = insert(value, root);
        }

        private Node insert(int value, Node node){
            if (node == null){
                node = new Node(value);
                return node;
            }
            if (value < node.value){
                node.left = insert(value, node.left);
            }
            if(value > node.value){
                node.right = insert(value,node.right);
            }

            node.height = Math.max(height(node.left), height(node.right)) + 1;
            return rotate(node);
        }


        private Node rotate(Node node){
            if(height(node.left) - height(node.right) > 0){
                if(height(node.left.left) - height(node.left.right) > 0){
                    return rightRotate(node);
                }
                if(height(node.left.left) - height(node.left.right) < 0){
                    node.left = leftRotate(node.left);
                    return rightRotate(node);
                }
            }

            if(height(node.left) - height(node.right) < -1){
                if(height(node.right.left) - height(node.right.right) < 0){
                    return leftRotate(node);
                }
                if(height(node.right.left) - height(node.right.right) > 0){
                    node.right = rightRotate(node.right);
                    return leftRotate(node);
                }
            }
            return node;
        }
