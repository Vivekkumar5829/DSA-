class Binary_Search_Tree{
    static class node{
        int key;
        node left,right;
    }
    static node newNode(int item){
        node temp = new node();
        temp.key = item;
        temp.left = temp.right = null;
        return temp;
    }
    static node insert(node node,int key){
        if(node == null){
            return newNode(key);
        }
        if(key < node.key){
            node.left = insert(node.left,key);
        } else if (key > node.key) {
            node.right = insert(node.right,key);
        }
        return node;
    }

    static void inOrder(node root){
        if(root != null){
            inOrder(root.left);
            System.out.print("--> " + root.key);
            inOrder(root.right);
        }
    }

    static void preOrder(node root){
        if(root != null){
            System.out.print("--> " + root.key);
            preOrder(root.left);
            preOrder(root.right);
        }
    }

    static void postOrder(node root){
        if(root != null){
            preOrder(root.left);
            postOrder(root.right);
            System.out.print("--> " + root.key);
        }
    }

    static int height(node node)
    {
        if (node == null)
            return 0;
        else {
            int lDepth = height(node.left);
            int rDepth = height(node.right);
            if (lDepth > rDepth)
                return (lDepth + 1);
            else
                return (rDepth + 1);
        }
    }
    static void printGivenLevel(node root, int level)
    {
        if (root == null)
            return;
        if (level == 1)
            System.out.print(" " + root.key);
        else if (level > 1) {
            printGivenLevel(root.left, level - 1);
            printGivenLevel(root.right, level - 1);
        }
    }

    static void printLeafNodes(node root){
        if(root == null)
            return;
        if(root.left == null && root.right == null) {
            System.out.print(" " + root.key);
        }
        if(root.left != null){
            printLeafNodes(root.left);
        }
        if(root.right != null){
            printLeafNodes(root.right);
        }
    }

    static void levelOrder(node root)
    {
        int h = height(root);
        int i;
        for (i = 1; i <= h; i++) {
            printGivenLevel(root, i);
            System.out.println();
        }
    }

    static void printNonLeafNode(node root){
        if(root == null || (root.left == null && root.right == null))
            return;
        if (root.left != null || root.right != null) {
            System.out.print(" " + root.key);
        }
        printNonLeafNode(root.left);
        printNonLeafNode(root.right);
    }


    public static void main(String[] args) {
        node root = null;
        root = insert(root, 50);
        insert(root, 30);
        insert(root, 20);
        insert(root, 40);
        insert(root, 70);
        insert(root, 60);
        insert(root, 80);
        inOrder(root);
    }
}
